
<project xmlns:maven="jelly:maven"
		xmlns:util="jelly:util"
		xmlns:j="jelly:core"
		xmlns:ant="jelly:ant"  xmlns:artifact="artifact" xmlns:license="license">

	<goal name="singularity:dist" prereqs="singularity:xdoclet">
          <attainGoal name="jar:install" />
		<attainGoal name="singularity:ejb:install" />
	</goal>
  


	
	<goal name="singularity:xmlschema" description="Generate the XML Schema with XMLBeans">
		
		<taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean">
			<classpath>
				<path refid="maven.dependency.classpath"/>
			</classpath>
		</taskdef>
		
		<xmlbean>
			<ant:setProperty name="schema" value="${basedir}/schemas"/>
			<ant:setProperty name="destfile" value="${basedir}/lib/schemas.jar"/>
			<ant:setProperty name="srcgendir" value="${basedir}/gensrc"/>
			<ant:setProperty name="classgendir" value="${maven.build.dest}"/>
			<ant:setProperty name="classpathref" value="maven.dependency.classpath"/>
			<ant:setProperty name="javasource" value="1.5"/>
			<ant:setProperty name="source" value="1.5"/>
			<ant:setProperty name="debug" value="on"/>
		</xmlbean>
		
		<delete dir="${maven.build.dest}/schemaorg_apache_xmlbeans" />
		<ant:delete verbose="false" failonerror="false">
			<ant:fileset dir="${maven.build.dest}">
				<ant:include name="*.properties" />
			</ant:fileset>
		</ant:delete>
	</goal>


	
	<goal name="singularity:xdoclet"
			description="Build the Hibernate Files">
		
		<echo>Building ${pom.Description} Hibernate Files...</echo>
		
		
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
			<classpath>
				<path refid="maven.dependency.classpath"/>
				
				<pathelement path="${pom.getDependencyPath('xdoclet:xdoclet-hibernate-module')}"/>
				<pathelement path="${pom.getDependencyPath('xdoclet:xdoclet')}"/>
				<pathelement path="${pom.getDependencyPath('xjavadoc:xjavadoc')}"/>
				<pathelement path="${pom.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
				<pathelement path="${pom.getDependencyPath('commons-collections:commons-collections')}"/>
				<pathelement path="${pom.getDependencyPath('commons-logging:commons-logging')}"/>
				<pathelement path="${pom.getDependencyPath('log4j:log4j')}"/>
        <!--
        -->
			</classpath>
		</taskdef>
		
		<hibernatedoclet>
		<!--
            encoding="${maven.xdoclet.hibernatedoclet.encoding}"
            docencoding="${maven.xdoclet.hibernatedoclet.docencoding}"
		   -->
			<ant:setProperty name="excludedTags" value="${maven.xdoclet.hibernatedoclet.excludedTags}"/>
			<ant:setProperty name="destDir" value="${singularity.xdoclet.hibernatedoclet.destDir}"/>
			<ant:setProperty name="verbose" value="${singularity.xdoclet.hibernatedoclet.verbose}"/>
			
			<fileset dir="${maven.src.dir}">
				<j:set var="fileset_index_include_var_name" value="singularity.xdoclet.hibernatedoclet.fileset.include"/>
				<j:set var="fileset_index_exclude_var_name" value="singularity.xdoclet.hibernatedoclet.fileset.exclude"/>
				<j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
					<include name="${context.getVariable(fileset_index_include_var_name)}"/>
				</j:if>
				<j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
					<exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
				</j:if>
			</fileset>
			<hibernate version="${singularity.xdoclet.hibernatedoclet.hibernate.Version}" />
		
		</hibernatedoclet>
		
	
	
	</goal>

  <!--==================================================================-->
  <!-- Builds ejb files                                                 -->
  <!--==================================================================-->
  <goal name="singularity:ejb:ejb" prereqs="ejb:init"
      description="Build ejb-jar and ejb-client files">

    <attainGoal name="singularity:ejb-jar-internal"/>
    <j:if test="${context.getVariable('maven.ejb.client.generate') == 'true'}">
      <attainGoal name="ejb:ejb-client-internal"/>
    </j:if>

  </goal>

  <goal name="singularity:ejb-jar-internal">

    <ant:echo>Building ejb ${maven.final.name}</ant:echo>

    <ant:available property="maven.ejb.manifest.available"
      file="${maven.ejb.manifest}"/>

    <j:forEach var="dep" items="${pom.dependencies}">
      <j:if test="${dep.getProperty('ejb.manifest.classpath')=='true'}">
    				<j:if test="${dep.getProperty('ejb.manifest.classpath.dir') != null}">
                                  <j:set var="maven.ejb.classpath" value="${maven.ejb.classpath} ${dep.getProperty('ejb.manifest.classpath.dir')}/${dep.artifact}"/>
				</j:if>
    				<j:if test="${dep.getProperty('ejb.manifest.classpath.dir') == null}">
                                  <j:set var="maven.ejb.classpath" value="${maven.ejb.classpath} ${dep.artifact}"/>
				</j:if>
      </j:if>
    </j:forEach>

    <!-- jar task used for now due to problems with ejb jar not including 
         files other than class files -->
    <ant:jar
      jarfile="${maven.ejb.build.dir}/${maven.ejb.final.name}"
      index="${maven.ejb.index}">
      
      <!-- include marked dependencies -->
      <j:forEach var="lib" items="${pom.artifacts}">
        <j:set var="dep" value="${lib.dependency}"/>     

        <!-- Just include jars-->
        <!-- Probably we should also include uberjars -->
        <j:if test="${dep.getProperty('ejb.bundle')=='true' and dep.type=='jar'}">          
          <ant:echo>Bundling: ${dep.type} - ${dep.id}</ant:echo>                                             
          <ant:fileset dir="${lib.file.parent}">
            <ant:include name="${lib.file.name}"/>
          </ant:fileset>
        </j:if>   
        
        <!-- TO BE REMOVED -->
        <j:if test="${dep.getProperty('ejb.bundle.jar')=='true'}">
          <ant:echo> 
           <ant:echo>Bundling: ${dep.type} - ${dep.id}</ant:echo>        
            DEPRECATION WARNING:            
            Use : ejb.bundle instead of ejb.bundle.jar
          </ant:echo>
          <ant:fileset dir="${lib.file.parent}">
            <ant:include name="${lib.file.name}"/>
          </ant:fileset>
        </j:if>  
        <!-- END OF TO BE REMOVED -->        
      </j:forEach>
 
      <j:if test="${maven.ejb.manifest.available}">
        <ant:setProperty name="manifest" value="${maven.ejb.manifest}" />
      </j:if>

      <j:set var="licenseFileName"><license:fileName/></j:set>
      <util:file name="${licenseFileName}" var="licenseFile"/>
      <ant:metainf dir="${licenseFile.canonicalFile.parent}">
        <ant:include name="${licenseFile.canonicalFile.name}"/>
      </ant:metainf>

      <ant:manifest>
        <ant:attribute name="Built-By" value="${user.name}"/>
        <ant:attribute name="Created-By" value="Apache Maven"/>
        <ant:attribute name="Package" value="${pom.package}"/>
        <j:set var="classPath" value="${maven.ejb.classpath}"/>
        <j:if test="${!empty(classPath)}">
          <ant:attribute name="Class-Path" value="${maven.ejb.classpath}"/>
        </j:if>
        <ant:section name="${pom.package}">
          <ant:attribute name="Specification-Title" value="${pom.artifactId}"/>
          <ant:attribute name="Specification-Vendor" value="${pom.organization.name}"/>
          <!--
          <ant:attribute name="Specification-Version" value="${pom.currentVersion}"/>
          -->
          <ant:attribute name="Implementation-Title" value="${pom.package}"/>
          <ant:attribute name="Implementation-Vendor" value="${pom.organization.name}"/>
          <ant:attribute name="Implementation-Version" value="${pom.currentVersion}"/>
        </ant:section>
      </ant:manifest>
    
      <util:available file="${maven.ejb.src}">
        <ant:fileset dir="${maven.ejb.src}"/>
      </util:available>
      <ant:fileset dir="${maven.build.dest}"
        includes="${maven.ejb.includes}"
        excludes="${maven.ejb.excludes}">
      </ant:fileset>

    </ant:jar>

  </goal>

  <!--==================================================================-->
  <!-- Install the ejbs in the local repository                         -->
  <!--==================================================================-->    
  <goal name="singularity:ejb:install"
        prereqs="singularity:ejb:ejb"
        description="Install the ejb files in the local repository">
     
    <artifact:install
        artifact="${maven.ejb.build.dir}/${maven.ejb.final.name}"
        type="ejb"
        project="${pom}"
        typeHandler="${ejbTypeHandler}"/>
    <j:if test="${context.getVariable('maven.ejb.client.generate') == 'true'}">
      <artifact:install
          artifact="${maven.ejb.build.dir}/${maven.ejb.client.final.name}"
          type="ejb-client"
          project="${pom}"
          typeHandler="${ejbTypeHandler}"/>
    </j:if>

  </goal>
 	
</project>

